apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  annotations:
    sidecar.istio.io/inject: "false"
  name: nb-tests
  namespace: auto-deploy
spec:
  inputs:
    params:
    - description: Path to the notebook to run. This should be the relative path relative to the root of the repository where the notebook lives.
      name: notebook-path
      type: string
    - description: Cluster pattern to run the notebook test. Default to be from master branch.
      name: testing-cluster-pattern
      type: string
    - description: Location to search for test clusters e.g. us-central1 or us-central1-f
      name: testing-cluster-location
      type: string
    - description: This should be the bucket that the rendered notebook will be written to. This should be a GCS path that is accessible from the KF cluster where the notebook runs. It will be copied to artifacts-gcs. This should be a directory.
      name: notebook-output
      type: string
    - description: GCS bucket and directory artifacts will be uploaded to. Should be in the form of 'gs://'
      name: artifacts-gcs
      type: string
    - default: manual-testing
      description: Test targe name, used to group test results in JUNIT.
      name: test-target-name
      type: string
    - default: default-profile
      description: The namespace to run the notebook in
      name: nb-namespace
      type: string
    - default: gcr.io/kubeflow-ci/test-worker-py3@sha256:a749d7fa4d77466c892a206d3adf0909e86717da898dbd12378e6cbed59ffbd3
      description: The docker image to run the tests in
      name: test-image
      type: string
  steps:
  - args:
    - -m
    - kubeflow.testing.get_kf_testing_cluster
    - get-credentials
    - --pattern=$(inputs.params.testing-cluster-pattern)
    - --location=$(inputs.params.testing-cluster-location)
    - --output=/workspace/cluster.info.yaml
    command:
    - python
    env:
    - name: PYTHONPATH
      value: /srcCache/kubeflow/testing/py
    image: $(inputs.params.test-image)
    name: get-credential
  - env:
    - name: PYTHONPATH
      value: /srcCache/kubeflow/testing/py
    image: $(inputs.params.test-image)
    name: run-notebook
    script: |
      #!/usr/bin/env bash
      set -x
      mkdir -p /workspace/artifacts
      pytest run_notebook_test.py \
        --log-cli-level=info \
        --log-cli-format='%(levelname)s|%(asctime)s|%(pathname)s|%(lineno)d| %(message)s' \
        --timeout=1800 \
        --junitxml=/workspace/artifacts/junit_notebook.xml \
        --notebook_path=/src/notebook-repo/$(inputs.params.notebook-path) \
        --test-target-name=$(inputs.params.test-target-name) \
        --artifacts-gcs=$(inputs.params.notebook-output) \
        --image_file=$(inputs.params.artifacts-gcs)/image.yaml \
        --namespace=$(inputs.params.nb-namespace)
      echo test finished
    workingDir: /srcCache/kubeflow/testing/py/kubeflow/testing/notebook_tests
  - image: $(inputs.params.test-image)
    name: copy-buckets
    script: |
      #!/usr/bin/env bash
      set -x
      gsutil cp -r $(inputs.params.notebook-output)/ $(inputs.params.artifacts-gcs)
      # Need the echo command to prevent a gsutil error from causing the task to fail
      # which would prevent the copy-artifacts step from running
      echo copy-buckets finished
  - args:
    - -m
    - kubeflow.testing.tekton_client
    - junit_parse_and_upload
    - --artifacts_dir=/workspace/artifacts
    - --output_gcs=$(inputs.params.artifacts-gcs)
    command:
    - python
    env:
    - name: PYTHONPATH
      value: /srcCache/kubeflow/testing/py
    image: $(inputs.params.test-image)
    name: copy-artifacts
